namespace org.logistics.testnet

/**
 * The type of perishable product being shipped
 */
enum ProductType {
  o FOOD
	o MEDICINE
	o MACHINES
	o OTHER
}

enum ItemStatus {
  o GOOD
  o DAMAGED
  o CRITICAL
}
/**
 * Transformation types for a product
 */
enum TransformationType{
	o JOIN
	o SPLIT
  o UPGRADE
	//o DELETE
}

/**
 * The status of a shipment
 */
enum ShipmentStatus {
  o WAITING
  o PACKING
  o DISPATCHING
  o SHIPPED_IN_TRANSIT
  o CANCELED
  o DELIVERED
  o RECEIVED
  o LOST
}


/**
 * An abstract transaction that is related to a Shipment
 */
abstract transaction ShipmentTransaction {
  --> Shipment shipment
  o ShipmentStatus status
}

/**
 * An temperature reading for a shipment. E.g. received from a
 * device within a temperature controlled shipping container
 */
transaction TemperatureReading extends ShipmentTransaction {
  o Double centigrade
}


// transfer possession to another person; final owner stays the same; check final owner
transaction TransferCommodityPossession {
  --> Commodity commodity
  --> supplyChainMember newHolder
}

/*
transaction CreateCommodity {
  --> supplyChainMember owner
  --> supplyChainMember holder
  o String GTIN
  o String name
  o String description
}
*/

transaction ReportDamagedGood {
  --> Commodity damagedGood
  o DateTime dateOccurred
  o DateTime dateReported
  o String occurrenceDescription
  o String itemConditionDescription
  o ItemStatus itemStatus

}

transaction TransformProduct {

}

transaction DeleteProduct{

}

asset Commodity identified by GTIN {
  --> supplyChainMember owner //FINAL OWNER - is updated on payout. If there's no payout implemented ==> if holder==shipment.buyer then owner=shipment.buyer
  --> supplyChainMember holder //IN POSSESSION OF ...
  o ProductType type
  o String GTIN
  o String name
  o String description
  o ItemCondition itemCondition
}



/**
 * A shipment being tracked as an asset on the ledger
 */
asset Shipment identified by shipmentId {
  o String shipmentId
  o String trackingNumber
  o ShipmentStatus status
  o Location location
  o Long unitCount
  o TemperatureReading[] temperatureReadings optional
  --> OrderContract contract
  --> Commodity assetExchanged
}

/**
 * Defines a contract between 2 entities, for a order/shipment
 */
asset OrderContract identified by orderId {
  o String orderId
  --> supplyChainMember buyer
  --> supplyChainMember seller
  o DateTime arrivalDateTime
  o Double unitPrice
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaltyFactor
  o Double maxPenaltyFactor
}

concept ItemCondition {
  o String conditionDescription
  o ItemStatus status
}

/**
 * A concept for a simple street address
 */
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
}

concept Location {
  o String locationId
  o String globalLN // global location number
  o Address address
}


/**
 * An abstract participant type in this business network
 */
abstract participant supplyChainMember identified by gs1CompanyPrefix {
  o String gs1CompanyPrefix
  o String email
  o Address address
  o Double accountBalance
  --> Commodity[] assets //not used at the moment
}

participant Supplier extends supplyChainMember {

}

participant Manufacturer extends supplyChainMember {

}

participant Distributor extends supplyChainMember {

}

participant Retailer extends supplyChainMember {

}

participant Customer extends supplyChainMember {

}
/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}

event changeOwnershipEvent{
--> Commodity commodity
--> supplyChainMember newHolder
--> supplyChainMember oldHolder
}
